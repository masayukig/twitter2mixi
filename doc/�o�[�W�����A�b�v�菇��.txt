バージョンアップ手順書

──────────────────
１、ミグレーション処理の事前確認
──────────────────
	ミグレーション処理プログラムが問題なく動くか移行前に確認を行う。

	1-1、本番ソース＆DBをバックアップ
		> cd C:\work\twitter2mixi
		> cap production_logrotate
		> cap production_backup

	1-2、DBのミグレーション処理
		バックされたアーカイブからDBを取り出す
		C:\work\twitter2mixi_migrateにDBを配置する
		ミグレーションのREADMEを参照に処理を実行
		移行が無事に完了したかDBの中身を確認
			移行ユーザ数が移行前と移行後で一致しているか確認する

	1-3、DBのミグレーションがうまくいっているかローカルアプリで確認

	1-4、複数ブラウザ対応確認


──────────────────
２、移行開始
──────────────────
	2-1、twit2mixiアカウントで工事になること告知
		https://twitter.com/
		アカウント名：twit2mixi

	2-2、本番サーバーを「工事中案内」にする
		> sudo vi /etc/httpd/conf.d/rails.conf
		> sudo /etc/rc.d/init.d/httpd restart

	2-3、CRON処理を止める
		> crontab -e

──────────────────
３、データミグレーション
──────────────────
	前述の1番の手順と同様に、止めた本番サーバー環境のDBを移行する

	3-1、本番ソース＆DBをバックアップ
		> cd C:\work\twitter2mixi
		> cap production_logrotate
		> cap production_backup

	3-2、DBのミグレーション処理
		バックされたアーカイブからDBを取り出す
		C:\work\twitter2mixi_migrateにDBを配置する
		ミグレーションのREADMEを参照に処理を実行
		移行が無事に完了したかDBの中身を確認
			移行ユーザ数が移行前と移行後で一致しているか確認する

	3-3、DBのミグレーションがうまくいっているかローカルで確認

──────────────────
４、本番環境書き換え
──────────────────
	4-1、本番環境を別名に変えて問題があった時にすぐに復旧できるようにする
		前回リリース時に作成した即時復旧データを削除
		> cap production_rollback_delete
		現行のソースコードにて即時復旧データを作成
		> cap production_begin

	4-2、本番サーバーのソースコードを最新化
		> cap production_deploy
		
		git clone git://github.com/nashiki/twitter2mixi.git

	4-3、設定ファイルを更新する
		config.yml
		views/_googleanalytics.erb

	4-4、本番サーバーへミグレーション後のDBを配置
		dbにコピー

──────────────────
５、移行完了確認
──────────────────
	5-1、新Verの本番環境が問題無く動いていることを確認する

	A,問題なければ
		CRONの再開
		> crontab -e
	
		「工事中案内」解除する
		> sudo vi /etc/httpd/conf.d/rails.conf
		> sudo /etc/rc.d/init.d/httpd restart

	B,問題あれば前述で控えた本番環境を元に戻す(ロールバック)
		> mv twitter2mixi twitter2mixi_gomi
		> mv twitter2mixi_back twitter2mixi

	　旧Verの本番環境が問題無く動いていることを確認する
	　問題なければ「工事中案内」解除する
